@using BrambleBerry.Kitchen
@using BrambleBerry.Kitchen.Controllers
@using Umbraco.Core.Models.Membership
@using MemberExtensions = BrambleBerry.Kitchen.Extensions.MemberExtensions


@inherits UmbracoViewPage<BrambleBerry.Kitchen.Models.Authorization.AuthorizationResetPasswordFormModel>
@{

    Layout = "Base.cshtml";
}


@switch (Model.IsValid)
{
    case MemberExtensions.ValidatePasswordResetTokenResult.Valid:
        @Valid()
        break;
    case MemberExtensions.ValidatePasswordResetTokenResult.TokenExpired:
    @TokenExpired()
        break;
    case MemberExtensions.ValidatePasswordResetTokenResult.IncorrectToken:
    @InvalidToken()
        break;
    default:
        throw new ArgumentOutOfRangeException();
}

@helper Valid()
{
    using (Html.BeginUmbracoForm<AuthorizationController>("ResetPassword"))
    {
        <h1>Reset password</h1>
        <div>
            <p>
                @Html.LabelFor(x => x.Password, new { @class = "required" })
                @Html.EditorFor(x => x.Password)
                @Html.ValidationMessageFor(x => x.Password)
            </p><p>
                @Html.LabelFor(x => x.ConfirmPassword, new { @class = "required" })
                @Html.EditorFor(x => x.ConfirmPassword)
                @Html.ValidationMessageFor(x => x.ConfirmPassword)
            </p>
            <p>
                <input type="submit" value="Submit" />
            </p>
        </div>

        @Html.HiddenFor(x=>x.MemberId)
        @Html.HiddenFor(x=>x.ResetToken)
    
        @Html.Raw(TempData["CustomMessage_ForgotPassword"])

        @Html.AntiForgeryToken()
    }
}

@helper InvalidToken()
{
    <h1>Error with toke, please try again</h1>
}
@helper TokenExpired()
{
    <h1>Token Expired</h1>
}