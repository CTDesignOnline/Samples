@inherits Merchello.Web.Mvc.MerchelloTemplatePage
@using Merchello.Core.Models
@using Merchello.Core.Services
@using Merchello.Web
@using Merchello.Core
@{

    var productKey = Guid.Empty;
    var shipmethodKey = Guid.Empty;


    var paymentMethodKey = Guid.Empty;
    
    
    
    // The UmbracoHelper
    
    var content = Umbraco.Content(1234);
    
    // The MerchelloHelper
    
    //var product = Merchello.Product("DB5AE93A-716C-4F02-B752-8CA467C98603");
    
    
    
    // CurrentPage
    
    var currentPage = CurrentPage; 
    
    // CurrentCustomer

    var customer = CurrentCustomer;
    
    
    
    // The Checkout Workflow

    
    // In a controller 
 
    var basket = CurrentCustomer.Basket();
    
    var product = MerchelloContext.Current.Services.ProductService.GetByKey(productKey);
    
    basket.AddItem(product);
    
    basket.Save();
    
    
    
    // Addresses for Shipping and Billing

    
    
    // The destination address
    var destination = new Address()
        {
            Name = "John Smith",
            Address1 = "123 Somewhere",
            Locality = "New York",
            Region = "NY",
            CountryCode = "US",
            PostalCode = "11122"
        };

    // assume we chose to use the same billing address
    
    // save the address

    var preparation = basket.SalePreparation();
    
    preparation.SaveShipToAddress(destination);
    preparation.SaveBillToAddress(destination);
    
    
    
    // Basket is packaged into one or more shipments
    // Current Version - only a single shipment
    
    var shipment = basket.PackageBasket(destination).FirstOrDefault();
    

    // Offer the customer shipment rate quotes

    var shipmentRateQuotes = shipment.ShipmentRateQuotes();
        
    
    // populate a drop down to allow the customer to select their preferred shipping method
    
    <select name="shipmethod">
        @foreach (var quote in shipmentRateQuotes)
        {
            <option value="@quote.ShipMethod.Key">
                @quote.ShipMethod.Name (@quote.Rate)
            </option>   
        }
    </select>
    
    
    
    // Get and save the users selection

    var approvedQuote = shipment.ShipmentRateQuoteByShipMethod(shipmethodKey);
    
    preparation.SaveShipmentRateQuote(approvedQuote);

    // CurrentCustomer.Basket().SalePreparation();    
    
    
    
    // time to checkout
    // preview the invoice and offer the customer their payment options

    var providerMethods = preparation.GetPaymentGatewayMethods();
    
    <select name="paymentMethods">
        @foreach (var provider in providerMethods)
        {
            <option value="@provider.PaymentMethod.Key">
                @provider.PaymentMethod.Name
            </option>
        }
    </select>
    
    
    
    // Preview the invoice and complete the order

    var invoice = preparation.PrepareInvoice();
    
    // Attempt to recieve payment

    var authCapture = preparation.AuthorizeCapturePayment(paymentMethodKey);

    if (authCapture.Payment.Success)
    {
        basket.Empty();
    }
    else
    {
        throw authCapture.Payment.Exception;
    }
    
    // redirect to your receipt
    
    
    
}
