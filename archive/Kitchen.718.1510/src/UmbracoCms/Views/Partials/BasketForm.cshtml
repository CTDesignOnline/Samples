@inherits UmbracoViewPage<BasketFormModel>
@using BrambleBerry.Kitchen.Controllers
@using BrambleBerry.Kitchen.Models
@using Buzz.Hybrid

@(Model.Items.Any() ? RenderBasket() : RenderEmpty())

@* The customer basket *@
@helper RenderBasket()
{
    using (Html.BeginUmbracoForm<BasketController>("UpdateBasket"))
    {
        <table id="basket-list" class="table-bordered col-s-8 offset-s-2">
            <thead>
                <tr>
                    <th class="name" colspan="2">@Umbraco.GetDictionaryValue("Product")</th>
                    <th class="price">@Umbraco.GetDictionaryValue("Price")</th>
                    <th class="quantity">@Umbraco.GetDictionaryValue("Quantity")</th>
                    <th class="total-price">@Umbraco.GetDictionaryValue("Total")</th>
                    <th class="delete"></th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < Model.Items.Count(); i++)
                {
                    <tr>
                        <td class="image">
                            @if (Model.Items[i].HasImage)
                            {
                                <a href="@Model.Items[i].Url"><img src="@Model.Items[i].Thumbnail.GetCropUrl(width: 100, height: 50)" alt="@Model.Items[i].Thumbnail.Name" /></a>
                            }
                        </td>
                        <td class="name">
                            <a href="@Model.Items[i].Url"><span class="product-name">@Model.Items[i].Name</span></a>
                            @if (Model.Items[i].IsVariant)
                            {
                                <em class="variant-name">@Model.Items[i].VariantName.Replace(string.Format("{0} - ", Model.Items[i].Name), string.Empty)</em>
                            }
                        </td>
                        <td class="price">@Model.Items[i].UnitPrice.ToString("C")</td>
                        <td class="quantity">@Html.TextBoxFor(x => Model.Items[i].Quantity, new { @class = "col-s-12", @type="number" })</td>
                        <td class="total-price">@Model.Items[i].TotalPrice.ToString("C")</td>
                        <td class="delete">
                            <a href="@Url.Action("RemoveItem", "Basket", new { lineItemKey = Model.Items[i].Key, basketPageId = Model.BasketPageContentId })" class="delete"><i class="fa fa-times"></i></a>
                            @Html.HiddenFor(model => Model.Items[i].Key)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    
        <div class="row">
            <div class="subtotal col-s-8 offset-s-2">
                <span class="label">@Umbraco.GetDictionaryValue("SubTotal"):</span>
                <span class="amount">@Model.TotalPrice.ToString("C")</span>
            </div>
        </div>

        <div class="col-s-8 offset-s-2">
            <div class="btn-group col-s-8">
                <a href="@Model.CheckoutUrl" role="button">@Umbraco.GetDictionaryValue("Checkout")</a>
                <input type="submit" value="Update" />
            </div>
            <a href="@Model.ContinueShoppingUrl" class="continue-shopping">@Umbraco.GetDictionaryValue("ContinueShopping")</a>
        </div>

    }
}

@* Displays if the customer does not have any items in their basket *@
@helper RenderEmpty()
{
    <div class="alert col-s-8 offset-s-2">
        <p>@Model.EmptyBasketText</p>
        <div class="btn-group row">
            <a href="@Model.ContinueShoppingUrl" role="button">@Umbraco.GetDictionaryValue("ContinueShopping")</a>
        </div>
    </div>
}