@inherits UmbracoViewPage<AuthorizationRegistrationModel>
@using BrambleBerry.Kitchen.Controllers
@using BrambleBerry.Kitchen.Models.Authorization
@using BrambleBerry.Kitchen.FormLogic
@{
    if (!(ViewData.ContainsKey("disableLayout") && (bool)ViewData["disableLayout"] == true))
    {
        Layout = "Base.cshtml";
    }
}

    @using (Html.BeginRoutedUmbracoForm<AuthorizationController>("Registration", FormMethod.Post, new { @class = "slide-toggle create-account-slide" }))
    {
        <h2>Create My Account</h2>
        if (TempData[AuthorizationController.RegistrationErrorMessageKey] != null)
        {
            <div class="alert warning">
                @Html.Raw(TempData[AuthorizationController.LoginErrorMessageKey])
            </div>
        }

        @* Wire frames show firstname & surname as one box but no relible way to split them if done like that? *@
        <label class="col-s-6">
            <span>@Html.DisplayNameFor(x => x.Firstname)</span>
            @Html.TextBoxFor(x => x.Firstname, new { placeholder = Html.DisplayNameFor(x => x.Firstname) })
            @Html.ValidationMessageFor(x => x.Firstname)
        </label>

        <label class="col-s-6">
            <span>@Html.DisplayNameFor(x => x.Surname)</span>
            @Html.TextBoxFor(x => x.Surname, new { placeholder = Html.DisplayNameFor(x => x.Surname) })
            @Html.ValidationMessageFor(x => x.Surname)
        </label>

        <label>
            <span>@Html.DisplayNameFor(x => x.Email)</span>
            @Html.TextBoxFor(x => x.Email, new { @placeholder = Html.DisplayNameFor(x => x.Email) })
            @Html.ValidationMessageFor(x => x.Email)
        </label>

        @*@Html.LabelFor(x => x.EmailConfirmation)
            @Html.EditorFor(x => x.EmailConfirmation)
            @Html.ValidationMessageFor(x => x.EmailConfirmation)*@

        <div class="form-group row no-gutter">
            <label class="col-xs-9">
                <span>@Html.DisplayNameFor(x => x.Password)</span>
                @Html.PasswordFor(x => x.Password, new { placeholder = Html.DisplayNameFor(x => x.Password) })
                @Html.ValidationMessageFor(x => x.Password)
            </label>
            <label class="checkbox col-xs-3 show-password">
                <input type="checkbox" name="show" />
                <span>Show</span>
            </label>
            <p class="help col-xs-12 reset-xs">We suggest you choose a unique passwod that's at least 6 characters, including a number or special character. This makes your account more secure!</p>
        </div>

        @*@Html.LabelFor(x => x.PasswordConfirmation)
            @Html.PasswordFor(x => x.PasswordConfirmation)
            @Html.ValidationMessageFor(x => x.PasswordConfirmation)*@

        <div class="helpers">
            @BramFormHelpers.RenderCheckBox(Html.NameFor(x => x.OptedInToMarketed), Html.IdFor(x => x.OptedInToMarketed), MvcHtmlString.Create("Send me the Bramble Berry Newsletter to get access to exclusive new projects, recipes, and discounts!"))
        </div>

        @Html.HiddenFor(model => model.ReturnUrl)
        @Html.AntiForgeryToken()
        <button type="submit">Create My Account</button>
    }

